registry:
  url: "{{ jupyter_docker_registry_url }}"
  username: "{{ jupyter_docker_registry_username }}"
  password: "{{ docker_reg_passwd }}"

  BinderHub:
    hub_url: "https://{{ jupyter_ingress_hostname }}/"
    use_registry: true
    image_prefix: "{{ jupyter_docker_registry_image_prefix }}"
    debug: true
  DockerRegistry:
    token_url: "{{ jupyter_docker_registry_token_url }}"

service:
  type: ClusterIP

debug:
  enabled: true

jupyterhub:
  cull:
    enabled: true
    timeout: 3600 # max-idle-seconds-before-user-pod-is-deleted
    every: 60 # number-of-seconds-this-check-is-done
    max_age: 28800 # maximum age (in seconds) of servers that should be culled even if they are active, 28800 = 60*60*8
  singleuser:
    storage:
      type: none
  hub:
    db:
      type: sqlite-memory
    services:
      binder:
        apiToken: "{{ jupyter_binder_api_token }}"
  proxy:
    secretToken: "{{ jupyter_proxy_token }}"
    service:
      type: ClusterIP

  ingress:
    enabled: true
    hosts:
      - "{{ jupyter_ingress_hostname }}"
    annotations:
      external-dns.alpha.kubernetes.io/hostname: "{{ jupyter_ingress_hostname }}"
      kubernetes.io/ingress.class: "nginx"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    tls:
      - hosts:
          - "{{ jupyter_ingress_hostname }}"

ingress:
  enabled: true
  hosts:
    - "{{ jupyter_ingress_binder_hostname }}"
  annotations:
    external-dns.alpha.kubernetes.io/hostname: "{{ jupyter_ingress_binder_hostname }}"
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  tls:
    - hosts:
        - "{{ jupyter_ingress_binder_hostname }}"

initContainers:
  - name: initialize-custom-root-ca
    image: debian:latest
    imagePullPolicy: Always
    command:
      - sh
      - -c
      - apt-get update && apt-get install -y ca-certificates openssl && cp -v /var/tmp/* /usr/local/share/ca-certificates && openssl x509 -in /var/tmp/*.crt -text && update-ca-certificates --verbose && cp -v /etc/ssl/certs/* /tmp/
    volumeMounts:
      - mountPath: /var/tmp
        name: docker-registry-cert
      - mountPath: /tmp/
        name: ssl-certs

extraVolumes:
  - name: docker-registry-cert
    secret:
      secretName: "{{ name }}-docker-registry-cert"
      items:
        - key: registryCert
          path: custom-docker-reg-root-ca.crt
  - name: ssl-certs
    emptyDir: {}

extraVolumeMounts:
  - mountPath: /etc/ssl/certs
    name: ssl-certs
  - mountPath: /var/tmp/ssl-certs
    name: docker-registry-cert
